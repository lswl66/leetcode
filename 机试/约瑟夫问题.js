// 输入一个由随机数组成的数组（数组中每个数均是大于 0 的整数，长度已知），和初始计数值m。
// 从数组首位置开始计数，计数到 m 后，将数组该位置数值替换为计数值 m，并将数组该位置数值出列，然后从下一个位置重新开始计数，直到数组所有数值出列为止。
// 如果计数到达数组尾部，则回到数组首位置继续计数。
// 请编程实现上述计数过程，同时输出数组出列的顺序。
// 例如：输入的随机数列为 3,1,2,4，初始计数值 m=7，从数组首位置开始计数（数值 3 所在位置）。
// 第一轮计数出列数字为 2，计数值更新为 m=2，出列后数组为 3,1,4，从数组 4 所在位置重新计数。
// 第一轮计数出列数字为 3，计数值更新为 m=3，出列后数组为 1,4，从数组 4 所在位置重新计数。
// 第一轮计数出列数字为 1，计数值更新为 m=1，出列后数组为 4，从数组 1 所在位置重新计数。
// 最终输出：2,3,1,4

function array_iterate(arr, m) {
    const res = [];
    let start = 0; // 从数组第几位开始计数

    while (arr.length > 0) {
        // 根据动态变化的 m 值计算当前索引
        // 例：如果从数组索引 3 开始计数 7个 ，则相当于从第 0 位开始计数 7 + 3个
        let index = (start + m - 1) % arr.length;
        // 移除并记录当前元素
        const removed = arr.splice(index, 1)[0];
        res.push(removed);
        // 更新起点为上一次的索引
        start = index;
        // 动态更新 m，比如这里我们取被移除的元素作为新的 m
        m = removed;
    }

    console.log(res)
}

array_iterate([3, 1, 2, 4], 7)