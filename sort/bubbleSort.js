// 比较相邻的两个元素，如果前一个比后一个大，则交换它们 对每一对相邻元素执行相同的操作，从开始第一对到结尾的最后一对
// 每一轮循环后，最大的元素会"浮"到数组末尾 重复以上步骤，每次比较的元素数量减少1，直到没有任何一对数字需要比较
// 冒泡排序 时间复杂度为 O(n²)，空间复杂度为 O(1)
function bubbleSort(nums) {
    // 外层循环，控制排序轮数，每轮确定一个最大值
    for (let i = 0; i < nums.length - 1; i++) {
        // flag用于标记本轮是否发生了交换，如果没有交换说明数组已经有序
        let flag = false;
        // 内层循环，比较相邻元素并交换
        for (let j = 0; j < nums.length - i; j++) {
            // 如果前一个元素大于后一个元素，则交换它们的位置
            if (nums[j] > nums[j + 1]) {
                // 使用解构赋值进行交换
                [nums[j], nums[j + 1]] = [nums[j + 1], nums[j]]
                // 标记发生了交换
                flag = true
            }
        }
        // 如果本轮没有发生交换，说明数组已经有序，可以提前退出
        if (!flag) break
    }
    // 返回排序后的数组
    return nums
}

// 测试用例
console.log(bubbleSort([5, 6, 1, 4, 2, 8, 0, 3, 7, 9]));