// 给你一个整数数组 nums ，除某个元素仅出现 一次 外，其余每个元素都恰出现 三次 。请你找出并返回那个只出现了一次的元素。


// 我们可以统计所有数字中每个位上出现的 1 的个数，然后对 3 取模。如果某一位上的出现的 1 的个数无法被 3 整除，说明只出现一次的数字在该位上是 1，否则是 0
function singleNumber(nums) {
    let ans = 0;
    for (let i = 0; i < 32; ++i) {
        let cnt = 0;
        // 统计所有数字每位上1的个数 
        for (const x of nums) {
            // 把当前需要统计的位 移动到最后一位 和 1 进行与运算 如果当前位是1则 结果为1 否则为 0
            cnt += (x >> i) & 1;
        }

        // 因为重复的数字都是3的倍数 所以和3取余后 cnt 等于 0 / 1
        cnt %= 3;
        // 如果等于 0 则表示唯一的呢个数 在当前位是0 如果等于1就表示唯一的呢个数在当前位是 1 左移这么多位数
        // ans 和 左移后的数 取或 ans 每一位都是之前左移后的 cnt
        // 例如 [2,2,3,2] 第一轮循环后结果ans 是 1 
        // 第二轮循环时 此时为 00001 ｜= 00001 << 1 
        // 结果为 00001｜= 00011 即 
        // ans = 3 后续循环 由于每个数字每一位都是0  cnt为0 左移后为0 ｜= 后 不改变值 
        // 循环结束后 ans 为 3 即结果
        ans |= cnt << i;
    }
    // 32位 每一位的 0 / 1 确定后得到的就是结果
    return ans;
}

// 0010 0010 0011 0010
console.log(singleNumber([2, 2, 3, 2]));
